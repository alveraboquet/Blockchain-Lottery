[{"/home/empiric-18/Desktop/Blockchain Lottery/front-end/src/index.js":"1","/home/empiric-18/Desktop/Blockchain Lottery/front-end/src/App.js":"2","/home/empiric-18/Desktop/Blockchain Lottery/front-end/src/Navbar.js":"3","/home/empiric-18/Desktop/Blockchain Lottery/front-end/src/Main.js":"4"},{"size":255,"mtime":1658298174251,"results":"5","hashOfConfig":"6"},{"size":6270,"mtime":1659431228860,"results":"7","hashOfConfig":"6"},{"size":736,"mtime":1659011574027,"results":"8","hashOfConfig":"6"},{"size":2075,"mtime":1659006957635,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7s95rr",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/empiric-18/Desktop/Blockchain Lottery/front-end/src/index.js",[],[],"/home/empiric-18/Desktop/Blockchain Lottery/front-end/src/App.js",["23","24"],["25","26"],"import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport usdtabi from \"./build/USDT.json\";\nimport blockchainlottery from \"./build/BlockchainLottery.json\";\nimport Navbar from \"./Navbar\";\nimport Main from \"./Main\";\nfunction App() {\n  const [accounts, setAccounts] = useState(null);\n  const [ticketNumber, setTicketNumber] = useState(-1);\n  const [pricePool, setPricePool] = useState(null);\n  const [usdtBalance, setUsdtBalance] = useState(null);\n  const [lastWinner, setLastWinner] = useState(null);\n  const [isOn, setIsOn] = useState(null)\n  const [usdtContract, setUsdtContract] = useState(null);\n  const [blockchainLotteryContract, setBlockchainLotteryContract] = useState(null);\n  const [networkErr, setNetworkErr] = useState(null)\n  const [amount, setAmount] = useState(null);\n  const [symbol, setSymbol] = useState(null);\n\n  // const [usdtAddress, setUsdtAddress] = useState(null)\n  // const USDTAddress = \"0x7FFB3d637014488b63fb9858E279385685AFc1e2\"; //Polygon Mainnet Address For USDT Tokens\n  // const USDTAddress = \"0xc1ef3d10d02F27Fe16052Aa463DB2C27a7604660\"; //Polygon Mumbai Address For USDT Tokens\n  const USDTAbi = usdtabi.abi;\n  const BlockchainLotteryAddress = \"0x29F411Ce98E2339ED6F3AbA6063ef90f188F98cb\"\n  const BlockchainLotteryAbi = blockchainlottery.abi;\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      let chainId = await window.ethereum.request({ method: \"net_version\" })\n      console.log(chainId)\n      //eslint-disable-next-line\n      if (chainId != 80001) {\n        setNetworkErr(\"Please change network to polygon\")\n      } else {\n        setNetworkErr(null)\n      }\n      let _accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      setAccounts(_accounts);\n\n      const tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n      const tempSigner = tempProvider.getSigner();\n      const tempBlockchainLotteryContract = new ethers.Contract(\n        BlockchainLotteryAddress,\n        BlockchainLotteryAbi,\n        tempSigner\n      );\n      setBlockchainLotteryContract(tempBlockchainLotteryContract);\n      let tempAmount = await tempBlockchainLotteryContract.amount();\n      setAmount(tempAmount);\n      const USDTAddress = await tempBlockchainLotteryContract.USDTAddress();\n      // setUsdtAddress(USDTAddress)\n      const tempUSDTContract = new ethers.Contract(USDTAddress, USDTAbi, tempSigner);\n      setUsdtContract(tempUSDTContract);\n\n      let tempdecimals = await tempUSDTContract.decimals();\n      // let tempdecimals = 6\n\n      let tempSymbol = await tempUSDTContract.symbol();\n      setSymbol(tempSymbol);\n\n\n      let tempPricePool = await tempUSDTContract.balanceOf(\n        BlockchainLotteryAddress\n      );\n      console.log(tempPricePool.toNumber() / 10 ** tempdecimals);\n      setPricePool(tempPricePool.toNumber() / 10 ** tempdecimals);\n\n      let tempUSDTBalance = await tempUSDTContract.balanceOf(\n        tempSigner.getAddress()\n      );\n      console.log(tempUSDTBalance.toNumber() / 10 ** tempdecimals);\n      setUsdtBalance(tempUSDTBalance.toNumber() / 10 ** tempdecimals);\n\n      console.log(tempBlockchainLotteryContract);\n      let _lastWinner = await tempBlockchainLotteryContract.lastWinner();\n      setLastWinner(_lastWinner);\n\n      let _isOn = await tempBlockchainLotteryContract.isOn()\n      console.log(_isOn)\n      setIsOn(_isOn)\n\n      let _participants = await tempBlockchainLotteryContract.getAllParticipants();\n      console.log(_participants);\n      let _participantsTicket = await tempBlockchainLotteryContract.addressAndTickets(await tempSigner.getAddress())\n      let alltickets = await tempBlockchainLotteryContract.getAllTickets()\n      console.log(alltickets)\n      if (_participants.indexOf(await tempSigner.getAddress()) === -1) {\n        setTicketNumber(-1)\n      } else {\n        alltickets.map((item)=>{\n          if(item.toNumber()==_participantsTicket){\n            setTicketNumber(_participantsTicket.toNumber())\n          }else{\n            setTicketNumber(-1)\n          }\n        })\n      }\n\n    } else {\n      setNetworkErr(\"Please install Metamask\")\n    }\n\n\n    window.ethereum.on(\"accountsChanged\", function (accounts) {\n      connectWallet();\n    });\n\n    window.ethereum.on(\"networkChanged\", function (accounts) {\n      connectWallet();\n    });\n  };\n  useEffect(() => {\n    connectWallet();\n    console.log(\"connect executed\");\n    // console.log(ticketNumber);\n    // eslint-disable-next-line\n  }, []);\n\n  const approve = async () => {\n    usdtContract.approve(BlockchainLotteryAddress, amount);\n  };\n  const depositeUSDT = async () => {\n    blockchainLotteryContract.depositeUSDT(amount);\n  };\n  const getLottery = async () => {\n    console.log(await blockchainLotteryContract.getLottery());\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        connectWallet={connectWallet}\n        accounts={accounts}\n        usdtBalance={usdtBalance}\n        symbol={symbol}\n      />\n      <Main\n        approve={approve}\n        depositeUSDT={depositeUSDT}\n        pricePool={pricePool}\n        ticketNumber={ticketNumber}\n        lastWinner={lastWinner}\n        getLottery={getLottery}\n        symbol={symbol}\n        isOn={isOn}\n      />\n      {networkErr ? <h1 style={{ textAlign: \"center\", color: \"red\" }}>{networkErr}</h1> : null}\n      {/* <h1>Admin</h1>\n      <button onClick={setUsdtAddress}>Update USDT Address</button>\n      <button onClick={setFeeAccount}>set fee account</button>\n      <button onClick={getTime}>Get Time</button>\n      <button onClick={mint}>Mint Tokens</button>\n      <button onClick={getAllParticipants}>Get all participants</button>\n      <button onClick={setTimeDuration}>Set Time Duration</button>\n      <h1>User</h1>\n      <button onClick={connectWallet}>Connect Metamask</button>\n      <button onClick={approve}>Approve Tokens</button>\n      <button onClick={depositeUSDT}>Add money to lottery</button>\n      <button onClick={getLottery}>Get Lottery</button> \n      \n      #Lottery Contract Address (Mumbai Matic) \n      0xBDf8E38F99E60a839db7bf8CB779ECE832605bf2\n        \n      # Test Tether (Mumbai Matic)\n      0xc1ef3d10d02F27Fe16052Aa463DB2C27a7604660\n        \n      \n      */}\n    </div>\n  );\n}\n\nexport default App;\n","/home/empiric-18/Desktop/Blockchain Lottery/front-end/src/Navbar.js",[],[],"/home/empiric-18/Desktop/Blockchain Lottery/front-end/src/Main.js",[],[],{"ruleId":"27","severity":1,"message":"28","line":92,"column":30,"nodeType":"29","messageId":"30","endLine":92,"endColumn":32},{"ruleId":"31","severity":1,"message":"32","line":93,"column":29,"nodeType":"33","messageId":"34","endLine":93,"endColumn":31},{"ruleId":"31","severity":1,"message":"35","line":32,"column":19,"nodeType":"33","messageId":"34","endLine":32,"endColumn":21,"suppressions":"36"},{"ruleId":"37","severity":1,"message":"38","line":119,"column":6,"nodeType":"39","endLine":119,"endColumn":8,"suggestions":"40","suppressions":"41"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["42"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'connectWallet'. Either include it or remove the dependency array.","ArrayExpression",["43"],["44"],{"kind":"45","justification":"46"},{"desc":"47","fix":"48"},{"kind":"45","justification":"46"},"directive","","Update the dependencies array to be: [connectWallet]",{"range":"49","text":"50"},[4510,4512],"[connectWallet]"]